generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Models
model courses {
  course_id        Int                @id @default(autoincrement())
  course_title     String
  course_code      String             @unique
  course_credits   Int
  course_type      CourseType
  default_capacity Int
  course_desc      String
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  enrollments      enrollments[]
  program_courses  program_courses[]
  session_courses  session_courses[]
}

model enrollments {
  enrollment_id     Int              @id @default(autoincrement())
  enrollment_status EnrollmentStatus
  special_request   Boolean          @default(false)
  rejection_reason  String?
  student_id        Int
  course_id         Int           
  session_id        Int          
  registrar_id      Int?
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  course            courses          @relation(fields: [course_id], references: [course_id], onDelete: Restrict, onUpdate: Cascade)
  registrar         registrars?      @relation(fields: [registrar_id], references: [registrar_id], onDelete: SetNull, onUpdate: Cascade)
  session           sessions         @relation(fields: [session_id], references: [session_id], onDelete: Restrict, onUpdate: Cascade)
  student           students         @relation(fields: [student_id], references: [student_id], onDelete: Restrict, onUpdate: Cascade)

  @@unique([student_id, course_id, session_id])
}

model invitations {
  invitation_id Int              @id @default(autoincrement())
  email         String
  token         String           @unique @db.Uuid
  expires_at    DateTime
  status        InvitationStatus
  user_type     UserType
  student_id    Int?
  registrar_id  Int?
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt
  student       students?        @relation(fields: [student_id], references: [student_id], onDelete: SetNull, onUpdate: Cascade)
  registrar     registrars?      @relation(fields: [registrar_id], references: [registrar_id], onDelete: SetNull, onUpdate: Cascade)

  @@unique([email, status])
}

model program_courses {
  program_id Int
  course_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  course     courses  @relation(fields: [course_id], references: [course_id], onDelete: Restrict, onUpdate: Cascade)
  program    programs @relation(fields: [program_id], references: [program_id], onDelete: Restrict, onUpdate: Cascade)

  @@id([program_id, course_id])
}

model programs {
  program_id      Int               @id @default(autoincrement())
  program_name    String
  program_type    ProgramType
  total_credits   Int
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  program_courses program_courses[]
  students        students[]
}

model registrars {
  registrar_id    Int               @id @default(autoincrement())
  first_name      String?
  last_name       String?
  email           String            @unique
  profile_picture String?
  user_id         String            @unique @db.Uuid
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  is_suspended    Boolean           @default(false)
  is_deactivated  Boolean           @default(false)
  enrollments     enrollments[]
  invitations     invitations[]
}

model session_courses {
  session_id        Int
  course_id         Int
  status            CourseStatus     @default(OPEN)
  adjusted_capacity Int
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  course            courses         @relation(fields: [course_id], references: [course_id], onDelete: Restrict, onUpdate: Cascade)
  session           sessions        @relation(fields: [session_id], references: [session_id], onDelete: Restrict, onUpdate: Cascade)

  @@id([session_id, course_id])
}

model session_students {
  session_id        Int
  student_id        Int
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  student           students        @relation(fields: [student_id], references: [student_id], onDelete: Restrict, onUpdate: Cascade)
  session           sessions        @relation(fields: [session_id], references: [session_id], onDelete: Restrict, onUpdate: Cascade)

  @@id([session_id, student_id])
}

model sessions {
  session_id          Int               @id @default(autoincrement())
  session_name        String
  start_date          DateTime
  end_date            DateTime
  enrollment_deadline DateTime
  session_status      SessionStatus
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  enrollments         enrollments[]
  session_courses     session_courses[]
  session_students    session_students[]
}

model students {
  student_id       Int          @id @default(autoincrement())
  reg_number       String        @unique
  first_name       String?
  last_name        String?
  email            String        @unique
  profile_picture  String?
  program_id       Int
  user_id          String?        @unique @db.Uuid
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  enrollments      enrollments[]
  program          programs      @relation(fields: [program_id], references: [program_id], onDelete: Restrict, onUpdate: Cascade)
  invitations      invitations[]
  session_students session_students[]
}

model user_roles {
  id         Int       @id @default(autoincrement())
  user_id    String    @db.Uuid @unique
  role       UserType
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

// Enums
enum CourseType {
  UNDERGRADUATE
  GRADUATE
  MASTERS
  DOCTORATE
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum ProgramType {
  UNDERGRADUATE
  GRADUATE
  MASTERS
  DOCTORATE
}

enum SessionStatus {
  UPCOMING
  ACTIVE
  CLOSED
}

enum UserType {
  STUDENT
  REGISTRAR
  ADMIN
}

enum CourseStatus {
  OPEN
  CLOSED
  FULL
  CANCELLED
}

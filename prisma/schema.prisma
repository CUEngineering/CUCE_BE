generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model admins {
  admin_id        Int      @id @default(autoincrement())
  first_name      String?
  last_name       String?
  email           String   @unique
  profile_picture String?
  user_id         String   @unique @db.Uuid
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  is_suspended    Boolean  @default(false)
  is_deactivated  Boolean  @default(false)
   enrollments enrollments[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model courses {
  course_id        Int               @id @default(autoincrement())
  course_title     String
  course_code      String            @unique
  course_credits   Int
  course_type      CourseType
  default_capacity Int
  course_desc      String?
  created_at       DateTime          @default(now())
  updated_at       DateTime          @default(now())
  enrollments      enrollments[]
  program_courses  program_courses[]
  session_courses  session_courses[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model enrollments {
  enrollment_id     Int              @id @default(autoincrement())
  enrollment_status EnrollmentStatus
  special_request   Boolean          @default(false)
  rejection_reason  String?
  student_id        Int
  course_id         Int
  session_id        Int
  registrar_id      Int?
  admin_id          Int? 
  created_at        DateTime         @default(now())
  updated_at        DateTime         @default(now())
  courses           courses          @relation(fields: [course_id], references: [course_id])
  registrars        registrars?      @relation(fields: [registrar_id], references: [registrar_id])
  sessions          sessions         @relation(fields: [session_id], references: [session_id])
  students          students         @relation(fields: [student_id], references: [student_id])
  admins            admins?          @relation(fields: [admin_id], references: [admin_id]) // <-- New relation

 /// @@unique([student_id, course_id, session_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model invitations {
  invitation_id Int              @id @default(autoincrement())
  email         String
  token         String           @unique @db.Uuid
  expires_at    DateTime
  status        InvitationStatus
  user_type     UserType
  student_id    Int?
  registrar_id  Int?
  created_at    DateTime         @default(now())
  updated_at    DateTime         @default(now())
  registrars    registrars?      @relation(fields: [registrar_id], references: [registrar_id])
  students      students?        @relation(fields: [student_id], references: [student_id])

  @@unique([email, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model program_courses {
  program_id Int
  course_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  courses    courses  @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  programs   programs @relation(fields: [program_id], references: [program_id], onDelete: Cascade)

  @@id([program_id, course_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model programs {
  program_id      Int               @id @default(autoincrement())
  program_name    String
  program_type    ProgramType
  total_credits   Int
  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now())
  program_courses program_courses[]
  students        students[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model registrars {
  registrar_id    Int           @id @default(autoincrement())
  first_name      String?
  last_name       String?
  email           String        @unique
  profile_picture String?
  user_id         String        @unique @db.Uuid
  created_at      DateTime      @default(now())
  updated_at      DateTime      @default(now())
  is_suspended    Boolean       @default(false)
  is_deactivated  Boolean       @default(false)
  enrollments     enrollments[]
  invitations     invitations[]
  student_registrar_sessions student_registrar_sessions[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model session_courses {
  session_id        Int
  course_id         Int
  status            CourseStatus @default(OPEN)
  adjusted_capacity Int
  created_at        DateTime     @default(now())
  updated_at        DateTime     @default(now())
  courses           courses      @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  sessions          sessions     @relation(fields: [session_id], references: [session_id], onDelete: Cascade)

  @@id([session_id, course_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model session_students {
  session_id Int
  student_id Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  sessions   sessions @relation(fields: [session_id], references: [session_id])
  students   students @relation(fields: [student_id], references: [student_id])

  @@id([session_id, student_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sessions {
  session_id          Int                @id @default(autoincrement())
  session_name        String
  start_date          DateTime
  end_date            DateTime
  enrollment_deadline DateTime
  session_status      SessionStatus
  created_at          DateTime           @default(now())
  updated_at          DateTime           @default(now())
  enrollments         enrollments[]
  session_courses     session_courses[]
  session_students    session_students[]
  student_registrar_sessions student_registrar_sessions[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model students {
  student_id       Int                @id @default(autoincrement())
  reg_number       String             @unique
  first_name       String?
  last_name        String?
  email            String             @unique
  profile_picture  String?
  program_id       Int
  user_id          String?            @unique @db.Uuid
  status           String             @default("ACTIVE")
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now())
  enrollments      enrollments[]
  invitations      invitations[]
  session_students session_students[]
  programs         programs           @relation(fields: [program_id], references: [program_id])
  student_registrar_sessions student_registrar_sessions[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_roles {
  id         Int      @id @default(autoincrement())
  user_id    String   @unique @db.Uuid
  role       UserType
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

enum CourseStatus {
  OPEN
  CLOSED
  FULL
  CANCELLED
}

enum CourseType {
  UNDERGRADUATE
  GRADUATE
  MASTERS
  DOCTORATE
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum ProgramType {
  UNDERGRADUATE
  GRADUATE
  MASTERS
  DOCTORATE
}

enum SessionStatus {
  UPCOMING
  ACTIVE
  CLOSED
}

enum UserType {
  STUDENT
  REGISTRAR
  ADMIN
}

model PasswordReset {
  id         Int      @id @default(autoincrement())
  email      String
  token      String
  createdAt  DateTime @default(now())

  @@map("password_resets")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model student_registrar_sessions {
  student_id Int
  registrar_id Int
  session_id Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  student   students @relation(fields: [student_id], references: [student_id])
  registrar   registrars @relation(fields: [registrar_id], references: [registrar_id])
  session   sessions @relation(fields: [session_id], references: [session_id])

  @@id([student_id, registrar_id, session_id])
}

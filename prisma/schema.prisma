generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Define enums based on requirements
enum ProgramType {
  UNDERGRADUATE
  GRADUATE
  MASTERS
  DOCTORATE
}

enum CourseType {
  UNDERGRADUATE
  GRADUATE
  MASTERS
  DOCTORATE
}

enum SessionStatus {
  UPCOMING
  ACTIVE
  CLOSED
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum UserType {
  STUDENT
  REGISTRAR
  ADMIN
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

// Define models based on ERD
model Program {
  program_id      String      @id @default(uuid()) @db.Uuid
  program_name    String
  program_type    ProgramType
  total_credits   Int
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  program_courses ProgramCourse[]
  students        Student[]

  @@map("programs")
}

model Course {
  course_id        String      @id @default(uuid()) @db.Uuid
  course_title     String
  course_code      String      @unique
  course_credits   Int
  course_type      CourseType
  default_capacity Int
  course_desc      String
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  enrollments      Enrollment[]
  program_courses  ProgramCourse[]
  session_courses  SessionCourse[]

  @@map("courses")
}

model Session {
  session_id          String        @id @default(uuid()) @db.Uuid
  session_name        String
  start_date          DateTime
  end_date            DateTime
  enrollment_deadline DateTime
  session_status      SessionStatus
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  enrollments         Enrollment[]
  session_courses     SessionCourse[]

  @@map("sessions")
}

model Student {
  id              String      @id @default(uuid()) @db.Uuid
  student_id      String      @unique @default(uuid()) @db.Uuid
  first_name      String?
  last_name       String?
  email           String      @unique
  profile_picture String?
  program_id      String      @db.Uuid
  user_id         String      @unique @db.Uuid
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  enrollments     Enrollment[]
  program         Program     @relation(fields: [program_id], references: [program_id])

  @@map("students")
}

model Registrar {
  registrar_id    String      @id @default(uuid()) @db.Uuid
  first_name      String?
  last_name       String?
  email           String      @unique
  profile_picture String?
  user_id         String      @unique @db.Uuid
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  is_suspended    Boolean     @default(false)
  enrollments     Enrollment[]

  @@map("registrars")
}

model Enrollment {
  enrollment_id     String          @id @default(uuid()) @db.Uuid
  enrollment_status EnrollmentStatus
  special_request   Boolean         @default(false)
  rejection_reason  String?
  student_id        String          @db.Uuid
  course_id         String          @db.Uuid
  session_id        String          @db.Uuid
  registrar_id      String?         @db.Uuid
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  course            Course          @relation(fields: [course_id], references: [course_id])
  registrar         Registrar?      @relation(fields: [registrar_id], references: [registrar_id])
  session           Session         @relation(fields: [session_id], references: [session_id])
  student           Student         @relation(fields: [student_id], references: [id])

  @@unique([student_id, course_id, session_id], name: "unique_enrollment_not_rejected")
  @@map("enrollments")
}

model ProgramCourse {
  program_id      String      @db.Uuid
  course_id       String      @db.Uuid
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  course          Course      @relation(fields: [course_id], references: [course_id])
  program         Program     @relation(fields: [program_id], references: [program_id])

  @@id([program_id, course_id])
  @@map("program_courses")
}

model SessionCourse {
  session_id        String      @db.Uuid
  course_id         String      @db.Uuid
  status            String      @default("OPEN")
  adjusted_capacity Int
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  course            Course      @relation(fields: [course_id], references: [course_id])
  session           Session     @relation(fields: [session_id], references: [session_id])

  @@id([session_id, course_id])
  @@map("session_courses")
}

model Invitation {
  invitation_id   String           @id @default(uuid()) @db.Uuid
  email          String
  token          String           @unique @default(uuid()) @db.Uuid
  expires_at     DateTime
  status         InvitationStatus
  user_type      UserType
  student_id     String?          @db.Uuid
  registrar_id   String?          @db.Uuid
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt

  @@unique([email, status], name: "unique_active_invitation")
  @@map("invitations")
}
